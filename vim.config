"ln -sf ${PWD}/vim_config  ${HOME}/.vimrc
"NOTE : alias for ctrl = c,ctrl,C alias for enter = cr	
"Minimum settings maximum coding
"omni settings
:set number 
:set hlsearch
:set incsearch 
:set history=1000
:set ruler 	
:set undolevels=1000	
:set backspace=2 
:set tabstop=8
:set expandtab
:set shiftwidth=4
:set softtabstop=4

"make backspace work like most other apps
:syn on	

"Replace esc support with jk 	
:inoremap jk <esc>	

"Forcefull turnoff
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>


"Fast window resizing with +/- keys (horizontal); / and * keys (vertical)	
if bufwinnr(1) 	
map + <C-W>+	
map - <C-W>-	
map < <c-w><	
map > <c-w>>	
endif 	

"Allow fast switching between window	
:map <C-H> <C-W>h 	
:map <C-L> <C-W>l 	

" Only do this part when compiled with support for autocommands
if has("autocmd")
    " Enable file type detection
    filetype on
    " Syntax of these languages is fussy over tabs Vs spaces

    "automatic sourcing after saving the file
    autocmd bufwritepost .vimrc source $MYVIMRC

    autocmd FileType make setlocal ts=8 sts=8 sw=8 noexpandtab
    autocmd FileType yaml setlocal ts=2 sts=2 sw=2 expandtab

    " Customisations based on house-style (arbitrary)
    autocmd FileType html setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType css setlocal ts=2 sts=2 sw=2 expandtab
    autocmd FileType javascript setlocal ts=4 sts=4 sw=4 noexpandtab

    " Treat .rss files as XML
    autocmd BufNewFile,BufRead *.rss setfiletype xml

    "Redo use <ctrl-r>	
    autocmd BufRead *.py set smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
endif

    "surround plugin surround_45 : ASCII= _
    autocmd FileType php let b:surround_45 = "<?php \r ?>"

    autocmd FileType html let b:surround_45 = "<html> \r </html>"
"Indentation
vnoremap < <gv
vnoremap > >gv


"Add pathogen
filetype off " Pathogen needs to run before plugin indent on
execute pathogen#infect()
call pathogen#helptags() " generate helptags for everything in 'runtimepath'
filetype plugin indent on
syntax on

"Spell check macro
"Use of abbrevation 
":iabbrev teh the
":iabbrev Lunix Linux
":syntax keyword WordError teh Lunix 

"Edit text in vim
":set tw=0 wrap linebreak


"Use of vim macro
map _cl:call CleanLint()<CR>
func CleanLint()
    g/gtk_x11.c:*enum/d
    g/if_perl.*conversion to .*proto/d
endfunc 

"File Naviagation ctrlp plugin 	
":set runtimepath^=~/dotconfig/.vim/bundle/ctrlp.vim 	

:set wildignore+=*.so,*.swp,*.zip,*.pyc,*.class	

let g:ctrlp_show_hidden = 1	
let g:ctrlp_max_height = 30	

set omnifunc=syntaxcomplete#Complete 	

"tab complete 	
"http://stackoverflow.com/questions/2170023/how-to-map-keys-for-popup-menu-in-vim	
function! OmniPopup(action)	
if pumvisible()	
 if a:action == 'j'	
      return "\<C-N>"	
      elseif a:action == 'k'	
      return "\<C-P>"	
      endif	
    endif	
 return a:action	
endfunction	
inoremap <silent><C-j> <C-R>=OmniPopup('j')<CR>	
inoremap <silent><C-k> <C-R>=OmniPopup('k')<CR>	

"shortcut to open NERDTREE	
map <C-d> :NERDTreeToggle<CR>	

"CTRL-p plugin

"To disable
"let g:loaded_ctrlp = 1

"Tabularize to align the json 

"let mapleader=','
"if exists(":Tabularize")
"    nmap <Leader>t= :Tabularize /=<CR>
"    vmap <Leader>o= :Tabularize /=<CR>
"    nmap <Leader>o: :Tabularize /:\zs<CR>
"    vmap <Leader>o: :Tabularize /:\zs<CR>
"endif


"https://gist.github.com/tpope/287147
"If you put this in your vimrc file, then it will call the :Tabularize command each time you insert a | character.
inoremap <silent> <Bar>   <Bar><Esc>:call <SID>align()<CR>a
 
function! s:align()
  let p = '^\s*|\s.*\s|\s*$'
  if exists(':Tabularize') && getline('.') =~# '^\s*|' && (getline(line('.')-1) =~# p || getline(line('.')+1) =~# p)
    let column = strlen(substitute(getline('.')[0:col('.')],'[^|]','','g'))
    let position = strlen(matchstr(getline('.')[0:col('.')],'.*|\s*\zs.*'))
    Tabularize/|/l1
    normal! 0
    call search(repeat('[^|]*|',column).'\s\{-\}'.repeat('.',position),'ce',line('.'))
  endif
endfunction

"color scheme




